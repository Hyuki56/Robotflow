server:
  port: 8080

spring:
  application:
    name: www

  web:
    resources:
      static-locations: classpath:/META-INF/resources/, classpath:/resources/, classpath:/static/, classpath:/public/

  config:
    import: optional:file:.env[.properties] # 보안이 중요한 정보들은 env 파일로 관리

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  mail:
    host: smtp.gmail.com
    port: 587
    username: ${MAIL_USERNAME}  # 구글 이메일 입력
    password: ${MAIL_PASSWORD}  # 2단계 인증 앱 비밀번호 입력
    protocol: smtp
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true

  jpa:
    hibernate:
      ddl-auto: update #??? ??
    properties:
      hibernate:
        show_sql: true # SQL ??? ??? ??
        format_sql: true # SQL ??? ??? ?? ??
        default_batch_fetch_size: 100
    database-platform: org.hibernate.dialect.MySQL8Dialect #SQL ??(dialect)? ????, ? ??????? ???? ??? ?? ??

  servlet:
    multipart:
      enabled: true
      max-file-size: 20MB  # ?? ?? ?? ??
      max-request-size: 100MB  # ?? ?? ?? ??

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: http://localhost:8080/login/oauth2/code/google
            authorization-grant-type: authorization_code
            client-name: Google

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            client-name: Naver

          kakao:
            client-name: kakao
            authorization-grant-type: authorization_code
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            client-id: ${KAKAO_CLIENT_ID}
            client-authentication-method: client_secret_post
            scope:
              - profile_nickname
              - account_email

        provider: # 구글만 생략가능 (Spring Security가 기본값 제공)
          #          google:
          #            authorization-uri: https://accounts.google.com/o/oauth2/auth
          #            token-uri: https://oauth2.googleapis.com/token
          #            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          #            user-name-attribute: sub  # 구글에서 고유 사용자 ID는 "sub"로 제공

          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response  #  네이버 로그인시 getAttributes에서 id와 email이 response 안에 있기 때문

          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id  # 카카오에서 고유 사용자 ID는 "id"로 제공

logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql: trace

      springframework:
        security:
          oauth2: DEBUG
#    root: debug # ??? ?? ???